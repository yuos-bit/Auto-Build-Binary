name: Build Zerotier Binary

on:
  workflow_dispatch:
    inputs:
      ARCH:
        description: 'Target Architecture'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'aarch64'
          - 'armv7'
          - 'mipsel'
      VERSION:
        description: 'Zerotier Version'
        required: true
        default: '1.16.0'

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      INSTALL_DIR: ${{ github.workspace }}/sysroot

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gcc g++ clang cmake ninja-build git curl wget unzip \
            pkg-config autoconf automake libtool \
            qemu-user-static \
            crossbuild-essential-arm64 crossbuild-essential-armhf crossbuild-essential-mipsel \
            zlib1g-dev libcurl4-openssl-dev nlohmann-json3-dev \
            libncurses5-dev libncursesw5-dev

      - name: Set Compiler
        run: |
          case "${{ github.event.inputs.ARCH }}" in
            x86_64)
              export CC=gcc
              export CXX=g++
              TARGET_HOST=x86_64-linux-gnu
              ;;
            aarch64)
              export CC=aarch64-linux-gnu-gcc
              export CXX=aarch64-linux-gnu-g++
              TARGET_HOST=aarch64-linux-gnu
              ;;
            armv7)
              export CC=arm-linux-gnueabihf-gcc
              export CXX=arm-linux-gnueabihf-g++
              TARGET_HOST=arm-linux-gnueabihf
              ;;
            mipsel)
              export CC=mipsel-linux-gnu-gcc
              export CXX=mipsel-linux-gnu-g++
              TARGET_HOST=mipsel-linux-gnu
              ;;
          esac
          echo "Using compiler: $CC, $CXX"
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "TARGET_HOST=$TARGET_HOST" >> $GITHUB_ENV
          mkdir -p $INSTALL_DIR

      - name: Build zlib (Static)
        run: |
          curl -L -o zlib.tar.gz https://zlib.net/zlib-1.3.1.tar.gz
          tar -xzf zlib.tar.gz
          cd zlib-1.3.1
          CC=$CC ./configure --prefix=$INSTALL_DIR --static
          make -j$(nproc) install

      - name: Build ncurses (Static)
        run: |
          curl -L -o ncurses.tar.gz https://invisible-island.net/archives/ncurses/ncurses-6.4.tar.gz
          tar -xzf ncurses.tar.gz
          cd ncurses-6.4
          CC=$CC CXX=$CXX ./configure \
            --host=$TARGET_HOST \
            --prefix=$INSTALL_DIR \
            --with-shared=no \
            --with-static=yes \
            --without-debug \
            --without-ada \
            --without-manpages \
            --without-progs \
            --disable-stripping
          make -j$(nproc) install

      - name: Build libcurl (Static)
        run: |
          curl -L -o curl.tar.gz https://curl.se/download/curl-8.9.1.tar.gz
          tar -xzf curl.tar.gz
          cd curl-8.9.1
          CC=$CC CXX=$CXX ./configure \
            --host=$TARGET_HOST \
            --prefix=$INSTALL_DIR \
            --disable-shared \
            --enable-static \
            --with-zlib=$INSTALL_DIR \
            --without-ssl \
            --without-gnutls \
            --without-libidn2 \
            --without-librtmp \
            --without-brotli \
            --without-zstd
          make -j$(nproc) install

      - name: Build Prometheus-cpp (Static)
        run: |
          curl -L -o prometheus-cpp.tar.gz https://github.com/jupp0r/prometheus-cpp/releases/download/v1.3.0/prometheus-cpp-with-submodules.tar.gz
          tar -xzf prometheus-cpp.tar.gz
          cd prometheus-cpp-with-submodules
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR \
            -DCMAKE_SYSROOT=$INSTALL_DIR \
            -DCMAKE_FIND_ROOT_PATH=$INSTALL_DIR \
            -DZLIB_LIBRARY=$INSTALL_DIR/lib/libz.a \
            -DZLIB_INCLUDE_DIR=$INSTALL_DIR/include \
            -DCURL_INCLUDE_DIR=$INSTALL_DIR/include \
            -DCURL_LIBRARY=$INSTALL_DIR/lib/libcurl.a \
            -DENABLE_TESTING=OFF \
            -DENABLE_PUSH_PULL_TESTING=OFF \
            -DENABLE_SAMPLE=OFF \
            -G Ninja
          ninja install

      - name: Build Zerotier
        run: |
          curl -L -o zerotier-${{ github.event.inputs.VERSION }}.tar.gz \
            https://github.com/zerotier/ZeroTierOne/archive/refs/tags/${{ github.event.inputs.VERSION }}.tar.gz
          tar -xzf zerotier-${{ github.event.inputs.VERSION }}.tar.gz
          mv ZeroTierOne-${{ github.event.inputs.VERSION }} zerotier
          mkdir -p zerotier/build && cd zerotier/build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_PREFIX_PATH=$INSTALL_DIR \
            -DCMAKE_SYSROOT=$INSTALL_DIR \
            -DCMAKE_FIND_ROOT_PATH=$INSTALL_DIR \
            -DCMAKE_INCLUDE_PATH="$INSTALL_DIR/include" \
            -DCMAKE_LIBRARY_PATH="$INSTALL_DIR/lib" \
            -DCURL_INCLUDE_DIR=$INSTALL_DIR/include \
            -DCURL_LIBRARY=$INSTALL_DIR/lib/libcurl.a \
            -DPrometheus_CPP_DIR=$INSTALL_DIR \
            -DCMAKE_EXE_LINKER_FLAGS="-static -L$INSTALL_DIR/lib -lncursesw -lcurl -lz -lpthread -ldl" \
            -G Ninja
          ninja -v

      - name: Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zerotier-${{ github.event.inputs.VERSION }}-${{ github.event.inputs.ARCH }}
          path: zerotier/build/zerotier*

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.VERSION }}-${{ github.event.inputs.ARCH }}
          name: Zerotier ${{ github.event.inputs.VERSION }} (${{ github.event.inputs.ARCH }})
          files: zerotier/build/zerotier*
