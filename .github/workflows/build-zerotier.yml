name: Build ZeroTier Binary

on:
  workflow_dispatch:
    inputs:
      zerotier_version:
        description: "ZeroTier version (e.g. 1.14.0)"
        required: true
        default: "1.14.0"
      target_arch:
        description: "Target architecture (amd64, arm64, mipsel, mips, armhf)"
        required: true
        default: "amd64"

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up build environment and install prometheus-cpp
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git wget curl unzip \
            pkg-config autoconf automake libtool \
            nlohmann-json3-dev libcurl4-openssl-dev libssl-dev zlib1g-dev \
            gcc-mipsel-linux-gnu g++-mipsel-linux-gnu \
            gcc-mips-linux-gnu g++-mips-linux-gnu \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf

          # Build and install prometheus-cpp
          git clone --branch v1.1.0 https://github.com/jupp0r/prometheus-cpp.git
          cd prometheus-cpp
          git submodule update --init --recursive
          mkdir _build && cd _build
          cmake .. -DBUILD_SHARED_LIBS=ON -DENABLE_PUSH=OFF -DENABLE_COMPRESSION=OFF
          make -j$(nproc)
          sudo make install
          cd ../../

      - name: Download ZeroTier source
        run: |
          wget https://github.com/zerotier/ZeroTierOne/archive/refs/tags/${{ github.event.inputs.zerotier_version }}.tar.gz
          tar -xzf ${{ github.event.inputs.zerotier_version }}.tar.gz
          mv ZeroTierOne-${{ github.event.inputs.zerotier_version }} zerotier-src

      - name: Build ZeroTier
        run: |
          cd zerotier-src
          mkdir build && cd build

          # 指定 CMake 查找路径，确保找到 prometheus-cpp
          export CMAKE_PREFIX_PATH=/usr/local
          export CXXFLAGS="-I/usr/local/include"
          export LDFLAGS="-L/usr/local/lib"

          case "${{ github.event.inputs.target_arch }}" in
            amd64)
              cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
              ;;
            arm64)
              cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
                -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
                -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
              ;;
            armhf)
              cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=arm-linux-gnueabihf-gcc \
                -DCMAKE_CXX_COMPILER=arm-linux-gnueabihf-g++ \
                -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
              ;;
            mipsel)
              cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=mipsel-linux-gnu-gcc \
                -DCMAKE_CXX_COMPILER=mipsel-linux-gnu-g++ \
                -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
              ;;
            mips)
              cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_C_COMPILER=mips-linux-gnu-gcc \
                -DCMAKE_CXX_COMPILER=mips-linux-gnu-g++ \
                -DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH
              ;;
          esac

          make -j$(nproc)
          cd ..
          tar czf ../zerotier-${{ github.event.inputs.zerotier_version }}-${{ github.event.inputs.target_arch }}.tar.gz build/zerotier*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zerotier-${{ github.event.inputs.target_arch }}
          path: zerotier-${{ github.event.inputs.zerotier_version }}-${{ github.event.inputs.target_arch }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: zerotier-${{ github.event.inputs.target_arch }}
          path: ./release

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.zerotier_version }}
          files: ./release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
